{"layout/empty":"<!DOCTYPE html>\n<html>\n<head>\n    <title>{{ head.title }}</title>\n    {{{ head.meta_tags }}}\n    {{{ head.config }}}\n\n    <link href=\"{{ head.favicon }}\" rel=\"shortcut icon\">\n    {{#block \"head\"}}{{/block}}\n    \n    {{inject 'themeSettings' theme_settings}}\n</head>\n<body>\n    {{#block \"page\"}}{{/block}}\n\n    <script>\n        // Exported in app.js\n        window.stencilBootstrap(\"{{page_type}}\", {{jsContext}}).load();\n    </script>\n</body>\n</html>\n","pages/order-confirmation":"{{#partial \"head\"}}\n{{{ checkout.checkout_head }}}\n{{{ stylesheet '/assets/css/optimized-checkout.css' }}}\n{{{stylesheet '/assets/css/theme.css'}}}\n{{ getFontsCollection }}\n\n<script type=\"text/javascript\">\n    window.language = {{{langJson 'optimized_checkout'}}};\n</script>\n\n{{{head.scripts}}}\n\n{{/partial}}\n\n{{#partial \"page\"}}\n<div class=\"container\">\n    <header class=\"checkoutHeader optimizedCheckout-header\">\n        <div class=\"checkoutHeader-content\">\n            <h1 class=\"is-srOnly\">{{lang 'checkout.title'}}</h1>\n            <h2 class=\"checkoutHeader-heading\">\n                <a class=\"checkoutHeader-link\" href=\"{{urls.home}}\">\n                    {{#if checkout.header_image}}\n                        <img alt=\"{{settings.store_logo.title}}\" class=\"checkoutHeader-logo\" id=\"logoImage\" src=\"{{ checkout.header_image }}\"/>\n                    {{ else }}\n                        <span class=\"header-logo-text\">{{settings.store_logo.title}}</span>\n                    {{/if}}\n                </a>\n            </h2>\n        </div>\n    </header>\n    {{{ checkout.order_confirmation_content }}}\n    \n    <!-- Bolt addition -->\n    <script>\n        var checker = function(){\n            setTimeout(function(){\n                var badMessage = document.querySelector(\".orderConfirmation-section p:nth-child(2)\");\n                if(badMessage && badMessage.innerHTML.indexOf(\"Your order was sent to us but is currently awaiting payment\") != -1){\n                    badMessage.remove();\n                }\n                else{\n                    checker();\n                }\n            }, 500);\n        }\n        checker();\n    </script>\n    <script>\n        setInterval(function() {\n            var tags = document.getElementsByClassName(\"orderConfirmation-section\");\n            for (var i = 0; i < tags.length; i++) {\n                var elm = tags[i];\n                var txt = elm.innerText || elm.innerHTML;\n                if (txt.includes(\"pay by check\") || txt.includes(\"Bolt\")) {\n                    elm.style.display = 'none';\n                }\n            }\n        }, 200);\n    </script>\n    <!-- End BOlt addition -->\n    \n    {{{ footer.scripts }}}\n</div>\n\n<script type=\"text/javascript\">\n    // bazaarvoice\n    \n    var parseCurrency = function parseCurrency(price) {\n        return parseFloat(price).toFixed(2);\n    };\n\n    var parseTaxes = function parseTaxes(taxesArray) {\n        var taxes = taxesArray.reduce(function (previousTotal, currentTax) {\n            return previousTotal + parseFloat(currentTax.amount);\n        }, 0);\n\n        return !isNaN(taxes) ? taxes : 0;\n    };\n\n    async function fetchParentSKU(productId) {\n        const url = `{{ settings.secure_base_url }}/products.php?productId=${productId}`;\n        const data = await getRequest(url, {'stencil-options': '{\"render_with\":\"product/parent-sku\"}'});\n        return data;\n    }\n\n    async function BVproductData(productInfo) {\n        return {\n            \"name\" : String(productInfo.name),\n            \"price\" : String(parseCurrency(productInfo.salePrice)),\n            \"quantity\" : String(productInfo.quantity),\n            \"sku\" : String(await fetchParentSKU(productInfo.productId)),\n        };\n    }\n\n    async function processData(orderInfo) {\n        var keyTypes = ['giftCertificates', 'physicalItems', 'customItems', 'digitalItems'];\n        var produdctDataArr = [];\n        var lineItems = orderInfo.lineItems;\n\n        var report = {\n            \"currency\": String(orderInfo.currency.code),\n            \"orderId\": String(orderInfo.orderId),\n            \"total\": String(parseCurrency(orderInfo.orderAmount)),\n            \"tax\": String(parseCurrency(parseTaxes(orderInfo.taxes))),\n            \"shipping\": String(parseCurrency(orderInfo.shippingCostTotal)),\n            \"items\": [],\n            \"email\": String(orderInfo.billingAddress.email),\n            \"locale\": \"en_US\",\n            \"nickname\": String(orderInfo.billingAddress.firstName)\n        };\n\n        for (var i = 0; i < keyTypes.length; i++) {\n            var keyType = keyTypes[i];\n            var lineItemArray = lineItems[keyType] || [];\n\n            for (var j = 0; j < lineItemArray.length; j++) {\n                var lineItem = lineItemArray[j];\n                report.items.push(await BVproductData(lineItem));\n            }\n        }\n\n        return report;\n    }\n\n    function getAjax(url, success, headers = {}) {\n        var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');\n        xhr.open('GET', url);\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState > 3 && xhr.status == 200) success(xhr.responseText);\n        };\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        xhr.setRequestHeader('Content-Type', 'application/xml');\n\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n\n        xhr.send();\n        return xhr;\n    }\n\n    function getRequest(url, headers = {}) {\n        return new Promise((resolve) => {\n            var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');\n            xhr.open('GET', url);\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState > 3 && xhr.status == 200){\n                    resolve(xhr.responseText);\n                }\n            };\n            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n            xhr.setRequestHeader('Content-Type', 'application/xml');\n\n            Object.keys(headers).forEach((key) => {\n                xhr.setRequestHeader(key, headers[key]);\n            });\n\n            xhr.send();\n        });\n    }\n\n    var endPoint = '{{ settings.secure_base_url }}/api/storefront/orders/{{ checkout.order.id }}';\n\n    async function callBV() {\n        const data = await getRequest(endPoint);\n        const report = await processData(JSON.parse(data));\n        console.log(report);\n\n        window.bvCallback = function (BV) {\n            BV.pixel.trackTransaction(report);\n        };\n    }\n\n    callBV();\n</script>\n\n\n{{/partial}}\n\n{{> layout/empty}}\n"}
